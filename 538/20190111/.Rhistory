data(lm.generated)
X <- lm.generated$X
y <- lm.generated$y
data <- list(N = list(type = "int<lower=1>", dim = 1, value = nrow(X)),
k = list(type = "int<lower=1>", dim = 1, value = ncol(X)),
X = list(type = "matrix", dim = "[N, k]", value = X),
y = list(type = "vector", dim = "[N]", value = y))
parameters <- list(beta = list(type = "vector", dim = "[k]"),
sigma_sq = list(type = "real<lower=0>", dim = 1))
model <- list(priors = c("beta ~ normal(0, 10);",
"sigma_sq ~ inv_gamma(1, 1);"),
likelihood = c("y ~ normal(X * beta, sqrt(sigma_sq));"))
ikde.model <- define.model(data, parameters, model)
eval.point <- list(beta = c(1, 2, 3, 4),
sigma = 5)
if (class(ikde.model) != "ikde.model") stop("ikde.model must be of class \"ikde.model\".")
current.ikde.model <- ikde.model
#First build unrestricted model if it hasn't been already
if (!current.ikde.model$built) current.ikde.model <- build.model(current.ikde.model)
current.ikde.model$density.variable <- list(name = names(current.ikde.model$parameters)[1])
current.ikde.model$density.variable <- list(name = names(current.ikde.model$parameters)[1])
current.ikde.model$density.variable$value <- eval.point[[current.ikde.model$density.variable$name]][1]
model.list <- list(current.ikde.model)
num.parameters <- length(ikde.model$parameters)
parameter.index = 1
parameter <- names(ikde.model$parameters)[parameter.index]
parameter.type <- ikde.model$parameters[[parameter]]$type
parameter.type <- gsub(" ", "", parameter.type)
parameter.dim <- ikde.model$parameters[[parameter]]$dim
parameter.restriction.pos <- gregexpr("<[0-9A-Za-z\\.,\\*/\\+\\-\\^_=]+>", parameter.type)[[1]]
parameter.restriction <- substr(parameter.type, as.numeric(parameter.restriction.pos), as.numeric(parameter.restriction.pos) + attr(parameter.restriction.pos, "match.length") - 1)
#Only need to build two models: One with partially restricted vector and one with fully restricted vector (if this is not the last parameter in the model)
vector.length.pos <- gregexpr("(?<=vector\\[)[0-9A-Za-z\\.,\\*/\\+\\-\\^_]+(?=\\])", parameter.type, perl = TRUE)[[1]]
vector.length <- substr(parameter.type, as.numeric(vector.length.pos), as.numeric(vector.length.pos) + attr(vector.length.pos, "match.length") - 1)
vector.length.eval <- vector.length
#Only need to build two models: One with partially restricted vector and one with fully restricted vector (if this is not the last parameter in the model)
vector.length.pos <- gregexpr("(?<=\\[)[0-9A-Za-z\\.,\\*/\\+\\-\\^_]+(?=\\])", parameter.dim, perl = TRUE)[[1]]
vector.length <- substr(parameter.type, as.numeric(vector.length.pos), as.numeric(vector.length.pos) + attr(vector.length.pos, "match.length") - 1)
vector.length.eval <- vector.length
vector.length <- substr(parameter.dim, as.numeric(vector.length.pos), as.numeric(vector.length.pos) + attr(vector.length.pos, "match.length") - 1)
vector.length.eval <- vector.length
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
vector.length.eval <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), vector.length.eval, perl = TRUE)
}
vector.length.eval <- evaluate.expression(vector.length.eval, ikde.model = ikde.model, eval.point = eval.point)
vector.length.eval
sink()
sink()
sink()
vector.length.eval
eval.point
data
data$k
ikde.model$data$k
eval.point
#Only need to build two models: One with partially restricted vector and one with fully restricted vector (if this is not the last parameter in the model)
vector.length.pos <- gregexpr("(?<=\\[)[0-9A-Za-z\\.,\\*/\\+\\-\\^_]+(?=\\])", parameter.dim, perl = TRUE)[[1]]
vector.length <- substr(parameter.dim, as.numeric(vector.length.pos), as.numeric(vector.length.pos) + attr(vector.length.pos, "match.length") - 1)
vector.length.eval <- vector.length
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
vector.length.eval <- gsub(regex, paste0("ikde.model$data$", data.var, "$value"), vector.length.eval, perl = TRUE)
}
vector.length.eval <- evaluate.expression(vector.length.eval, ikde.model = ikde.model, eval.point = eval.point)
#Create names for restricted/unrestricted parameters in Stan code
parameter.restr <- paste0(parameter, "_restr")
parameter.restr.all <- paste0(parameter.restr, "_all")
parameter.unrestr <- paste0(parameter, "_unrestr")
#Create and build partially restricted model
partial.ikde.model <- current.ikde.model
partial.ikde.model$parameters[[parameter]] <- NULL #Remove from parameters list
partial.ikde.model$data$num_restrictions <- list(type = paste0("int<lower=1,upper=", vector.length, "-1>"), dim = 1, value = 1) #Can change number of restrictions in ML estimation
partial.ikde.model$data[[parameter.restr.all]] <- list(type = paste0("vector", parameter.restriction), dim = paste0("[", vector.length, "]"), value = as.array(eval.point[[parameter]])) #Add restricted values to data
partial.ikde.model$transformed.data[[parameter.restr]] <- list(type = paste0("vector", parameter.restriction), dim = "[num_restrictions]", expression = paste0(parameter.restr, " = head(", parameter.restr.all, ", num_restrictions);"))
partial.ikde.model$parameters[[parameter.unrestr]] <- list(type = paste0("vector", parameter.restriction), dim = paste0("[", vector.length, "-num_restrictions]")) #Add unrestricted values to parameters
partial.ikde.model$transformed.parameters <- append(eval(parse(text = paste0("list(", parameter, " = list(type = \"vector\"", parameter.restriction, ", dim = \"[", vector.length, "]\", expression = \"", parameter, " = append_row(", parameter.restr, ", ", parameter.unrestr, ");\"))"))), partial.ikde.model$transformed.parameters)
for (statement.num in 1:length(partial.ikde.model$model$priors)){
statement <- partial.ikde.model$model$priors[statement.num]
lhs <- gsub(" ", "", strsplit(statement, "~")[[1]][1])
rhs <- strsplit(statement, "~")[[1]][2]
if (lhs == parameter){
statement <- paste0(parameter.unrestr, " ~", rhs)
partial.ikde.model$model$priors[statement.num] <- statement
}
}
partial.ikde.model$model$priors
partial.ikde.model$density.variable <- list(name = parameter.unrestr)
partial.ikde.model$density.variable$value <- eval.point[[parameter]][2]
partial.ikde.model <- build.model(partial.ikde.model)
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
rm(list = ls())
library(ikde)
example("create.restricted.models")
example("evaluate.posterior")
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
rm(list = ls())
library(ikde)
example("evaluate.posterior")
example(bridge)
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
library(ikde)
example(bridge)
if (class(ikde.model) != "ikde.model") stop("ikde.model must be of class \"ikde.model\".")
if (!ikde.model$built) ikde.model <- build.model(ikde.model)
#First fit the model
stan.fit <- fit.model(ikde.model, burn.iter, sample.iter, 1, control, refresh, display.output)
burn.iter = 1000
sample.iter = 1000
control = NULL
refresh = NULL
tol = 1e-8
show.trace = FALSE
if (class(ikde.model) != "ikde.model") stop("ikde.model must be of class \"ikde.model\".")
if (!ikde.model$built) ikde.model <- build.model(ikde.model)
#First fit the model
stan.fit <- fit.model(ikde.model, burn.iter, sample.iter, 1, control, refresh, display.output)
display.output = FALSE
#First fit the model
stan.fit <- fit.model(ikde.model, burn.iter, sample.iter, 1, control, refresh, display.output)
stan.extract <- rstan::extract(stan.fit)
num.parameters <- length(stan.extract) - 1
1
#Make stan.extract into list to make it easier to work with later
#stan.extract.list is a list with parameter names, each containing a list where each element is a sample
as.list.samples <- function(parameter.samples){
if (length(dim(parameter.samples)) == 1){
return(as.list(parameter.samples))
} else if (length(dim(parameter.samples)) == 2){
return(split(parameter.samples, c(row(parameter.samples))))
} else{
stop("ikde currently only supports 0- and 1-dimensional parameters.")
}
}
stan.extract.list <- lapply(stan.extract, as.list.samples)
stan.extract.list$lp__ <- NULL
#Form proposal distributions
proposal.functions <- list()
for (parameter.num in 1:num.parameters){
parameter <- names(ikde.model$parameters)[parameter.num]
parameter.type <- ikde.model$parameters[[parameter]]$type
parameter.type <- gsub(" ", "", parameter.type)
parameter.restriction.pos <- gregexpr("<[0-9A-Za-z\\.,\\*/\\+\\-\\^_=]+>", parameter.type)[[1]]
parameter.restriction <- substr(parameter.type, as.numeric(parameter.restriction.pos), as.numeric(parameter.restriction.pos) + attr(parameter.restriction.pos, "match.length") - 1)
if (grepl("lower=", parameter.restriction)){
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
lower.limit <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), lower.limit, perl = TRUE)
}
lower.limit <- evaluate.expression(lower.limit, ikde.model = ikde.model)
if (grepl("upper=", parameter.restriction)){
#Upper and lower restrictions
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
upper.limit <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit, perl = TRUE)
}
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
#Use sigmoid function to transform samples from a MVN
#Use delta method to derive variance of MVN
#Let Y be constrained variable such that y = f(X), where X ~ MVN(mu, Sigma).
#We are able to estimate E[Y] and var(Y). We want to find mu and Sigma so that
#  * E[y] = f(mu)
#  * var(y) = t(f'(mu)) * Sigma * f'(mu)
if (length(dim(stan.extract[[parameter]])) == 1){
mu <- sigmoid.inv(mean(stan.extract[[parameter]]), lower.limit = lower.limit, upper.limit = upper.limit)$value
var.y <- var(stan.extract[[parameter]])
grad.diag <- sigmoid(mu, lower.limit = lower.limit, upper.limit = upper.limit)$gradient
grad.inv <- 1 / grad.diag
Sigma <- var.y * grad.inv^2
sampler <- function(n, mu, Sigma, lower.limit, upper.limit) lapply(1:n, function(i) sigmoid(rnorm(1, mean = mu, sd = sqrt(Sigma)), lower.limit = lower.limit, upper.limit = upper.limit)$value)
log.density <- function(x, mu, Sigma, lower.limit, upper.limit) log(sigmoid.inv(x, lower.limit = lower.limit, upper.limit = upper.limit)$gradient) + dnorm(sigmoid.inv(x, lower.limit = lower.limit, upper.limit = upper.limit)$value, mean = mu, sd = sqrt(Sigma), log = TRUE)
proposal.functions[[parameter]] <- list(sampler = sampler, log.density = log.density, mu = mu, Sigma = Sigma, lower.limit = lower.limit, upper.limit = upper.limit)
} else if (length(dim(stan.extract[[parameter]])) == 2){
mu <- sigmoid.inv(apply(stan.extract[[parameter]], 2, mean), lower.limit = lower.limit, upper.limit = upper.limit)$value
var.y <- var(stan.extract[[parameter]])
grad.diag <- sigmoid(mu, lower.limit = lower.limit, upper.limit = upper.limit)$gradient
grad.inv <- diag(1 / grad.diag)
Sigma <- grad.inv %*% var.y %*% grad.inv
sampler <- function(n, mu, Sigma, lower.limit, upper.limit) lapply(1:n, function(i) sigmoid(mvtnorm::rmvnorm(1, mean = mu, sigma = Sigma), lower.limit = lower.limit, upper.limit = upper.limit)$value)
log.density <- function(x, mu, Sigma, lower.limit, upper.limit) sum(log(sigmoid.inv(x, lower.limit = lower.limit, upper.limit = upper.limit)$gradient)) + mvtnorm::dmvnorm(sigmoid.inv(x, lower.limit = lower.limit, upper.limit = upper.limit)$value, mean = mu, sigma = Sigma, log = TRUE)
proposal.functions[[parameter]] <- list(sampler = sampler, log.density = log.density, mu = mu, Sigma = Sigma, lower.limit = lower.limit, upper.limit = upper.limit)
} else{
stop("ikde currently only supports 0- and 1-dimensional parameters.")
}
} else{
#Lower restriction only
if (length(dim(stan.extract[[parameter]])) == 1){
mu <- modified.exp.lower.inv(mean(stan.extract[[parameter]]), lower.limit = lower.limit)$value
var.y <- var(stan.extract[[parameter]])
grad.diag <- modified.exp.lower(mu, lower.limit = lower.limit)$gradient
grad.inv <- 1 / grad.diag
Sigma <- var.y * grad.inv^2
sampler <- function(n, mu, Sigma, lower.limit, upper.limit) lapply(1:n, function(i) modified.exp.lower(rnorm(1, mean = mu, sd = sqrt(Sigma)), lower.limit = lower.limit)$value)
log.density <- function(x, mu, Sigma, lower.limit, upper.limit) log(modified.exp.lower.inv(x, lower.limit = lower.limit)$gradient) + dnorm(modified.exp.lower.inv(x, lower.limit = lower.limit)$value, mean = mu, sd = sqrt(Sigma), log = TRUE)
proposal.functions[[parameter]] <- list(sampler = sampler, log.density = log.density, mu = mu, Sigma = Sigma, lower.limit = lower.limit, upper.limit = NA)
} else if (length(dim(stan.extract[[parameter]])) == 2){
mu <- modified.exp.lower.inv(apply(stan.extract[[parameter]], 2, mean), lower.limit = lower.limit)$value
var.y <- var(stan.extract[[parameter]])
grad.diag <- modified.exp.lower(mu, lower.limit = lower.limit)$gradient
grad.inv <- diag(1 / grad.diag)
Sigma <- grad.inv %*% var.y %*% grad.inv
sampler <- function(n, mu, Sigma, lower.limit, upper.limit) lapply(1:n, function(i) modified.exp.lower(mvtnorm::rmvnorm(1, mean = mu, sigma = Sigma), lower.limit = lower.limit)$value)
log.density <- function(x, mu, Sigma, lower.limit, upper.limit) sum(log(modified.exp.lower.inv(x, lower.limit = lower.limit)$gradient)) + mvtnorm::dmvnorm(modified.exp.lower.inv(x, lower.limit = lower.limit)$value, mean = mu, sigma = Sigma, log = TRUE)
proposal.functions[[parameter]] <- list(sampler = sampler, log.density = log.density, mu = mu, Sigma = Sigma, lower.limit = lower.limit, upper.limit = NA)
} else{
stop("ikde currently only supports 0- and 1-dimensional parameters.")
}
}
} else if (grepl("upper=", parameter.restriction)){
#Upper restriction only
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
upper.limit <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit, perl = TRUE)
}
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
if (length(dim(stan.extract[[parameter]])) == 1){
mu <- modified.exp.upper.inv(mean(stan.extract[[parameter]]), upper.limit = upper.limit)$value
var.y <- var(stan.extract[[parameter]])
grad.diag <- modified.exp.upper(mu, upper.limit = upper.limit)$gradient
grad.inv <- 1 / grad.diag
Sigma <- var.y * grad.inv^2
sampler <- function(n, mu, Sigma, lower.limit, upper.limit) lapply(1:n, function(i) modified.exp.upper(rnorm(1, mean = mu, sd = sqrt(Sigma)), upper.limit = upper.limit)$value)
log.density <- function(x, mu, Sigma, lower.limit, upper.limit) log(modified.exp.upper.inv(x, upper.limit = upper.limit)$gradient) + dnorm(modified.exp.upper.inv(x, upper.limit = upper.limit)$value, mean = mu, sd = sqrt(Sigma), log = TRUE)
proposal.functions[[parameter]] <- list(sampler = sampler, log.density = log.density, mu = mu, Sigma = Sigma, lower.limit = NA, upper.limit = upper.limit)
} else if (length(dim(stan.extract[[parameter]])) == 2){
mu <- modified.exp.upper.inv(apply(stan.extract[[parameter]], 2, mean), upper.limit = upper.limit)$value
var.y <- var(stan.extract[[parameter]])
grad.diag <- modified.exp.upper(mu, upper.limit = upper.limit)$gradient
grad.inv <- diag(1 / grad.diag)
Sigma <- grad.inv %*% var.y %*% grad.inv
sampler <- function(n, mu, Sigma, lower.limit, upper.limit) lapply(1:n, function(i) modified.exp.upper(mvtnorm::rmvnorm(1, mean = mu, sigma = Sigma), upper.limit = upper.limit)$value)
log.density <- function(x, mu, Sigma, lower.limit, upper.limit) sum(log(modified.exp.upper.inv(x, upper.limit = upper.limit)$gradient)) + mvtnorm::dmvnorm(modified.exp.upper.inv(x, upper.limit = upper.limit)$value, mean = mu, sigma = Sigma, log = TRUE)
proposal.functions[[parameter]] <- list(sampler = sampler, log.density = log.density, mu = mu, Sigma = Sigma, lower.limit = NA, upper.limit = upper.limit)
} else{
stop("ikde currently only supports 0- and 1-dimensional parameters.")
}
} else{
#No restrictions
if (length(dim(stan.extract[[parameter]])) == 1){
mu <- mean(stan.extract[[parameter]])
Sigma <- var(stan.extract[[parameter]])
sampler <- function(n, mu, Sigma, lower.limit, upper.limit) lapply(1:n, function(i) rnorm(1, mean = mu, sd = sqrt(Sigma)))
log.density <- function(x, mu, Sigma, lower.limit, upper.limit) dnorm(x, mean = mu, sd = sqrt(Sigma), log = TRUE)
proposal.functions[[parameter]] <- list(sampler = sampler, log.density = log.density, mu = mu, Sigma = Sigma, lower.limit = NA, upper.limit = NA)
} else if (length(dim(stan.extract[[parameter]])) == 2){
mu <- apply(stan.extract[[parameter]], 2, mean)
Sigma <- var(stan.extract[[parameter]])
sampler <- function(n, mu, Sigma, lower.limit, upper.limit) lapply(1:n, function(i) mvtnorm::rmvnorm(1, mean = mu, sigma = Sigma))
log.density <- function(x, mu, Sigma, lower.limit, upper.limit) mvtnorm::dmvnorm(x, mean = mu, sigma = Sigma, log = TRUE)
proposal.functions[[parameter]] <- list(sampler = sampler, log.density = log.density, mu = mu, Sigma = Sigma, lower.limit = NA, upper.limit = NA)
} else{
stop("ikde currently only supports 0- and 1-dimensional parameters.")
}
}
}
#Draw samples from proposal distributions
proposal.samples <- list()
log.proposal.proposal.matrix <- matrix(NA, nrow = sample.iter, ncol = num.parameters)
log.proposal.posterior.matrix <- matrix(NA, nrow = sample.iter, ncol = num.parameters)
for (parameter.num in 1:num.parameters){
parameter <- names(ikde.model$parameters)[parameter.num]
sampler <- proposal.functions[[parameter]]$sampler
mu <- proposal.functions[[parameter]]$mu
Sigma <- proposal.functions[[parameter]]$Sigma
lower.limit <- proposal.functions[[parameter]]$lower.limit
upper.limit <- proposal.functions[[parameter]]$upper.limit
proposal.samples[[parameter]] <- proposal.functions[[parameter]]$sampler(sample.iter, mu, Sigma, lower.limit, upper.limit)
log.proposal.proposal.matrix[,parameter.num] <- sapply(proposal.samples[[parameter]], proposal.functions[[parameter]]$log.density, mu = mu, Sigma = Sigma, lower.limit = lower.limit, upper.limit = upper.limit)
log.proposal.posterior.matrix[,parameter.num] <- sapply(stan.extract.list[[parameter]], proposal.functions[[parameter]]$log.density, mu = mu, Sigma = Sigma, lower.limit = lower.limit, upper.limit = upper.limit)
# if (length(dim(stan.extract[[parameter]])) == 1){
#   log.proposal.posterior.matrix[,parameter.num] <- sapply(stan.extract[[parameter]], proposal.functions[[parameter]]$log.density, mu = mu, Sigma = Sigma, lower.limit = lower.limit, upper.limit = upper.limit)
# } else if (length(dim(stan.extract[[parameter]])) == 2){
#   log.proposal.posterior.matrix[,parameter.num] <- sapply(1:sample.iter, function(i) proposal.functions[[parameter]]$log.density(stan.extract[[parameter]][i,], mu, Sigma, lower.limit, upper.limit))
# } else{
#   stop("ikde currently only supports 0- and 1-dimensional parameters.")
# }
}
log.proposal.proposal <- rowSums(log.proposal.proposal.matrix)
log.proposal.posterior <- rowSums(log.proposal.posterior.matrix)
#Calculate constant densities (not depending on log-marginal)
log.likelihood.proposal <- rep(NA, sample.iter)
log.prior.proposal <- rep(NA, sample.iter)
for (i in 1:sample.iter){
eval.point <- lapply(proposal.samples, function(sample.list, i) c(sample.list[[i]]), i)
log.likelihood.proposal[i] <- evaluate.likelihood(ikde.model, eval.point)
log.prior.proposal[i] <- evaluate.priors(ikde.model, eval.point)
}
eval.point <- lapply(proposal.samples, function(sample.list, i) c(sample.list[[i]]), i)
log.likelihood.proposal[i] <- evaluate.likelihood(ikde.model, eval.point)
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
rm(list = ls())
library(ikde)
examle(bridge)
example(bridge)
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
library(ikde)
example(bridge)
example("evaluate.likelihood")
if (class(ikde.model) != "ikde.model") stop("ikde.model must be of class \"ikde.model\".")
if (class(eval.point) != "list") stop("eval.point must be a list.")
example("evaluate.statement")
if (class(statement) != "character") stop("statement must be a string.")
if (length(statement) > 1) stop("statement must only contain one element.")
if (class(ikde.model) != "ikde.model") stop("ikde.model must be of class \"ikde.model\".")
if (class(eval.point) != "list") stop("eval.point must be a list.")
#Clean statement and extract left- and right-hand sides
statement <- gsub(" ", "", statement)
lhs <- strsplit(statement, "~")[[1]][1]
rhs <- strsplit(statement, "~")[[1]][2]
#Resolve variables in lhs
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
lhs <- gsub(regex, paste0("ikde.model$data$", data.var, "$value"), lhs, perl = TRUE)
}
for (eval.var in names(eval.point)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", eval.var, "(?![0-9A-Za-z\\.\\$_]{1})")
lhs <- gsub(regex, paste0("eval.point$", eval.var), lhs, perl = TRUE)
}
lhs
names(eval.point)
rhs
#Extract distribution and map to R function
distribution.stan <- gsub("\\([0-9A-Za-z\\.,\\*/\\+\\-\\^_\\(\\)]+\\);$", "", rhs)
if (!(distribution.stan %in% names(stan.dist.to.r.dist))) stop(paste0(distribution.stan, " distribution not currently supported."))
distribution.r <- stan.dist.to.r.dist[[distribution.stan]]$distribution.r
arg.values <- strsplit(gsub("\\);$", "", gsub("^\\(", "", gsub(distribution.stan, "", rhs))), ",")[[1]]
arg.names <- stan.dist.to.r.dist[[distribution.stan]]$args
#Resolve variables in distribution arguments
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
}
for (eval.var in names(eval.point)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", eval.var, "(?![0-9A-Za-z\\.\\$_]{1})")
arg.values <- gsub(regex, paste0("eval.point$", eval.var), arg.values, perl = TRUE)
}
arg.values
#Evaluate distribution arguments
args <- lapply(arg.values, evaluate.expression, ikde.model = ikde.model, eval.point = eval.point)
#Resolve variables in distribution arguments
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "$value"), arg.values, perl = TRUE)
}
arg.values <- strsplit(gsub("\\);$", "", gsub("^\\(", "", gsub(distribution.stan, "", rhs))), ",")[[1]]
arg.names <- stan.dist.to.r.dist[[distribution.stan]]$args
#Resolve variables in distribution arguments
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "$value"), arg.values, perl = TRUE)
}
for (eval.var in names(eval.point)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", eval.var, "(?![0-9A-Za-z\\.\\$_]{1})")
arg.values <- gsub(regex, paste0("eval.point$", eval.var), arg.values, perl = TRUE)
}
arg.values
#Evaluate distribution arguments
args <- lapply(arg.values, evaluate.expression, ikde.model = ikde.model, eval.point = eval.point)
names(args) <- arg.names
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
rm(list = ls())
library(ikde)
example(bridge)
library(ikde)
example(bridge)
example(build.model)
example("create.declaration")
example("create.restricted.models")
example(dbern)
example(define.model)
example("evaluate.expression")
example("evaluate.likelihood")
example("evaluate.posterior")
example("evaluate.priors")
example("evaluate.statement")
example(fit.model)
example(gibbs.lm)
example(ikde)
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
rm(list = ls())
library(ikde)
example(ikde)
example("modified.exp.lower")
example("modified.exp.lower.inv")
example("modified.exp.upper")
example("modified.exp.upper.inv")
example(sigmoid.inv)
example(sigmoid)
example(stan.multiply)
example('%stan*%')
source('~/git/ikde-scripts/gibbs_stan_probit/stan_fit.R', echo=TRUE)
ikde.model$model
statement <- ikde.model$model$likelihood[1]
eval.point <- list(beta = c(1, 2, 3, 4), sigma_sq = 5)
if (class(statement) != "character") stop("statement must be a string.")
if (length(statement) > 1) stop("statement must only contain one element.")
if (class(ikde.model) != "ikde.model") stop("ikde.model must be of class \"ikde.model\".")
if (class(eval.point) != "list") stop("eval.point must be a list.")
#Clean statement and extract left- and right-hand sides
statement <- gsub(" ", "", statement)
lhs <- strsplit(statement, "~")[[1]][1]
rhs <- strsplit(statement, "~")[[1]][2]
#Resolve variables in lhs
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
lhs <- gsub(regex, paste0("ikde.model$data$", data.var, "$value"), lhs, perl = TRUE)
}
for (eval.var in names(eval.point)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", eval.var, "(?![0-9A-Za-z\\.\\$_]{1})")
lhs <- gsub(regex, paste0("eval.point$", eval.var), lhs, perl = TRUE)
}
#Extract distribution and map to R function
distribution.stan <- gsub("\\([0-9A-Za-z\\.,\\*/\\+\\-\\^_\\(\\)]+\\);$", "", rhs)
distribution.stan
if (!(distribution.stan %in% names(stan.dist.to.r.dist))) stop(paste0(distribution.stan, " distribution not currently supported."))
distribution.r <- stan.dist.to.r.dist[[distribution.stan]]$distribution.r
arg.values <- strsplit(gsub("\\);$", "", gsub("^\\(", "", gsub(distribution.stan, "", rhs))), ",")[[1]]
arg.names <- stan.dist.to.r.dist[[distribution.stan]]$args
arg.names
arg.values
ikde.model$transformed.parameters
f = function(...){
dots <- list(...)
print(dots)
}
f(list(a = 1, b = 2, c = 3), list(d = 1, e = 2))
100000 / 8
80000 * 8
30 * 5280 * 10 * 5
30 * 5280 * 10 * 5 * 5 / 27
30 * 5280 * 10 * 5 * 5 / 27 * 80
30 * 5280 * 10 * 5 * 5 / 27 * 80 / 1e6
30 * 5280 * 10 * 3 / 27 * 8
30 * 5280 * 10 * 3 / 27 * 8 / 1e6
30 * 5280 * 10 * 3 / 27
30 * 5280 * 25 * 3 / 27
30 * 5280 * 25 * 3 / 27 * 8 / 1e6
120*3/7
4.26*365
rm(list = ls())
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
library(ikde)
source('~/git/ikde-scripts/gibbs_stan_probit/stan_fit.R', echo=TRUE)
#Extracting likelihood
statement = ikde.model$model$likelihood[1]
3**6
0.1 * 0.075 * 0.05
setwd("~/git/pan/538/20190111")
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
P = read.table("transition.probabilities.csv", sep = ",")
p
P
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
P
P = read.table("transition.probabilities.csv", sep = ",")[-1,-1]
P
P = as.matrix(read.table("transition.probabilities.csv", sep = ",")[-1,-1])
eval(parse(text = "1+"))
eval(parse(text = "1+1"))
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
debugSource('~/git/pan/538/20190111/20190111.R', echo=TRUE)
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
m = sapply(P, function(s) eval(parse(text = "s")))
m = matrix(sapply(P, function(s) eval(parse(text = "s"))), nrow = nrow(P))
m
m = matrix(sapply(P, function(s) eval(parse(text = s))), nrow = nrow(P))
m
rowSums(m)
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
install.packages("expm")
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
init = matrix(c(1, rep(0, nrow(P) - 1)), nrow = 1)
init %*% (P %^% 1)
num.days = 1825
init %*% (P %^% num.days)
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
print(P)
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
prod(1:99)
n = 53013180176278773980288979275410970_139358547710066257652050346294484433323974747960297803292989236183040000000000
prod(1:3)
setwd("~/projects/Laser")
source('~/projects/Laser/test.R', echo=TRUE)
df
names(df)
source('~/projects/Laser/test.R', echo=TRUE)
df
source('~/projects/Laser/test.R', echo=TRUE)
df
source('~/projects/Laser/test.R', echo=TRUE)
source('~/projects/Laser/test.R', echo=TRUE)
source('~/projects/Laser/test.R', echo=TRUE)
source('~/projects/Laser/test.R', echo=TRUE)
source('~/projects/Laser/test.R', echo=TRUE)
source('~/git/pan/538/20190111/20190111.R', echo=TRUE)
P
