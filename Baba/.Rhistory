system("g++ -v")
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
72000 + 18000
14 * 5870
12 * 5870
20000 / 70440
5870 * 0.2839
5870 - 2150 - 200
5870 - 2150 - 250
5870 - 2150 - 250 - 1700
2 * 5870 - 2150 - 250 - 1700
2 * 5870 - 2150 - 250 - 1700 * 2
5940 * 5
29700 - 1500 * 5
1500 + 1000 + 3050 + 500 + 3000 + 1000
1700 * 6
3400 * 6
72000 - 110000
38000 / 6
38000 / 12
110000-90000
20000/6
1800*2*6
28000 / 6
install.packages("devtools")
devtools::install_github("tkmckenzie/snfa")
devtools::install_github("tkmckenzie/snfa")
devtools::install_github("tkmckenzie/snfa")
install.packages("Rcpp")
devtools::install_github("tkmckenzie/snfa")
install.packages("Rdpack")
library(lpSolve)
?devtools::install_github
remove.packages("snfa")
devtools::install_github("tkmckenzie/snfa", build_opts = "--no-resave-data", dependencies = c("Imports", "Suggests"))
devtools::install_github("tkmckenzie/snfa", build_opts = "--no-resave-data", dependencies = c("Imports", "Suggests"))
devtools::install_github("tkmckenzie/snfa", build_opts = "--no-resave-data", dependencies = c("Imports", "Suggests"))
R.version
install.packages("devtools")
devtools::install_github("tkmckenzie/snfa", build_opts = "--no-resave-data", dependencies = c("Imports", "Suggests"))
devtools::install_github("tkmckenzie/snfa", dependencies = c("Imports", "Suggests"))
install.packages("Rgraphviz")
devtools::install_github("tkmckenzie/snfa", dependencies = c("Imports"))
install.packages("ggplot2")
install.packages("knitr")
install.packages("lpSolve")
install.packages("Rdpack")
install.packages("rmarkdown")
?devtools::install_github
install.packages("dlstats")
library(dlstats)
cran_stats("snfa")
log(256, 2)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
library(rstan)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
str(stan.fit)
str(stan.extract)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
m
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
names(stan.extract)
# Pretty similar to classical regression results, as expected
apply(stan.extract$beta, 2, mean)
apply(stan.extract$beta, 2, function(col) mean(col > 0))
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation + log(Basin.Slope), df)
summary(m)
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation + log(Slope.30), df)
summary(m)
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
qqnorm(m$residuals)
qqline(m$residuals)
burn.iter = 1000
sample.iter = 10000
X = cbind(1, log(df$Area), log(df$Forest.Area), df$Annual.Precipitation)
y = log(df$Flow)
stan.data = list(N = nrow(X), k = ncol(X),
X = X, y = y,
beta_prior_sd = rep(10, ncol(X)),
sigma_prior_scale = 10)
stan.fit = stan("linear.stan", data = stan.data,
chains = 1, warmup = burn.iter, iter = burn.iter + sample.iter)
traceplot(stan.fit)
stan.fit = stan("linear.stan", data = stan.data,
chains = 1, warmup = burn.iter, iter = burn.iter + sample.iter)
traceplot(stan.fit)
stan.extract = extract(stan.fit)
summary(m)
# Pretty similar to classical regression results, as expected
apply(stan.extract$beta, 2, mean)
dim(stan.extract$beta)
apply(stan.extract$beta, 2, function(col) mean(col < 0))
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(Flow ~ 0 + log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
qqnorm(m$residuals)
qqline(m$residuals)
shapiro.test(m$residuals)
# Kitchen sink
# Only need a few components
pca = prcomp(~ log(Area) + Elevation + Basin.Relief + Slope.30 + Basin.Slope + MCS + log(Forest.Area) + Annual.Precipitation, df)
pca
pca / colSums(abs(pca))
abs(pca)
pca
pca$x / colSums(abs(pca$x))
# Elevation related variables
# (1) Elevation and Basin.Relief are positively related but vary independently
# (2) Neither variable seems strongly related to Flow
qplot(Elevation, Basin.Relief, data = df)
pca
qplot(Elevation, Annual.Precipitation, data = df) + scale_y_log10() + scale_x_log10()
