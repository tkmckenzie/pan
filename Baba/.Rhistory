setwd("~/git/pan/Baba")
source('~/git/pan/Baba/analysis.R', echo=TRUE)
names(df)
names(df)[1] = "Station"
ls
names(df)
write.csv(df, "data.csv", row.names = FALSE)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
df
source('~/git/pan/Baba/analysis.R', echo=TRUE)
df
source('~/git/pan/Baba/analysis.R', echo=TRUE)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
names(df)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
# Kitchen sink model
m = lm(log(Flow) ~ Area + Elevation + Basin.Relief + Slope.30 + Basin.Slope + MCS + Forest.Area + Annual.Precipitation, df)
summary(m)
m = lm(log(Flow) ~ Area, df)
summary(m)
m = lm(log(Flow) ~ Area + Elevation, df)
summary(m)
ggplot(df, aes(Elevation, Basin.Relief)) +
geom_point() +
scale_y_log10() +
theme_bw()
# Some plotting
qplot(Annual.Precipitation, Flow, df)
# Some plotting
qplot(Annual.Precipitation, Flow, data = df)
# Some plotting
qplot(Annual.Precipitation, Flow, data = df) + scale_y_log10()
qplot(Elevation, Basin.Relief, data = df) + scale_y_log10()
qplot(Elevation, Basin.Relief, data = df)
qplot(Annual.Precipitation, Basin.Relief, data = df) + scale_y_log10()
qplot(Basin.Relief, Flow, data = df) + scale_y_log10()
qplot(Elevation, Flow, data = df) + scale_y_log10()
qplot(Basin.Relief, Flow, data = df) + scale_y_log10()
# Elevation related variables
# (1) Elevation and Basin.Relief
qplot(Elevation, Basin.Relief, data = df)
# Slope related variables
qplot(Elevation, Slope.30, data = df) + scale_y_log10()
qplot(Elevation, Basin.Slope, data = df) + scale_y_log10()
# Slope related variables
qplot(Slope.30, Flow, data = df) + scale_y_log10()
qplot(Basin.Slope, Flow, data = df) + scale_y_log10()
qplot(MCS, Flow, data = df) + scale_y_log10()
# Slope related variables
plot(df[,c("Slope.30", "Basin.Slope", "MCS")])
# Area
qplot(Area, Flow, data = df) + scale_y_log10()
# Area
qplot(Area, Flow, data = df) + scale_y_log10() + scale_x_log10()
# Area
# (1) Strong relationship to Flow, best described by log-log transformation
qplot(Area, Flow, data = df) + scale_y_log10() + scale_x_log10()
qplot(Elevation, Flow, data = df) + scale_y_log10()
qplot(Basin.Relief, Flow, data = df) + scale_y_log10()
qplot(MCS, Flow, data = df) + scale_y_log10()
m = lm(log(Flow) ~ log(Area) + MCS, df)
summary(m)
# Forest area
# (1) Strong relationship to Flow, best described by log-log transformation
qplot(Forest.Area, Flow, data = df) + scale_y_log10() + scale_x_log10()
# Forest area
# (1) Strong relationship to Flow, best described by log-log transformation
qplot(Forest.Area, Flow, data = df) + scale_y_log10()
# Annual precipitation
# (1) Negative relationship to Flow, best described by log-log transformation
qplot(Annual.Precipitation, Flow, data = df) + scale_y_log10() + scale_x_log10()
# Annual precipitation
# (1) Negative relationship to Flow, best described by log-log transformation
qplot(Annual.Precipitation, Flow, data = df) + scale_y_log10()
m = lm(log(Flow) ~ log(Area) + MCS, df)
summary(m)
m = lm(log(Flow) ~ log(Area) + MCS + log(Forest.Area), df)
summary(m)
m = lm(log(Flow) ~ log(Area) + MCS + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
plot(m)
shapiro.test(m$residuals)
qqnorm(m$residuals)
qqline(m$residuals)
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
# Dependency between independent variables
qplot(Area, Forest.Area, data = df)
# Dependency between independent variables
qplot(Area, Forest.Area, data = df) + scale_y_log10() + scale_x_log10()
qplot(Area, Annual.Precipitation, data = df) + scale_y_log10() + scale_x_log10()
# Kitchen sink model
m = lm(log(Flow) ~ log(Area) + Elevation + Basin.Relief + Slope.30 + Basin.Slope + MCS + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
# Model based on plots
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
plot(m)
?pca
# Model based on plots
m = prcompy(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
# Model based on plots
m = prcomp(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
# Model based on plots
m = prcomp( ~ log(Flow) + log(Area) + log(Forest.Area) + Annual.Precipitation, df)
m
summary(m)
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + log(Annual.Precipitation), df)
summary(m)
qqnorm(m$residuals)
qqline(m$residuals)
shapiro.test(m$residuals)
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
# Kitchen sink
pca = prcomp(~ log(Area) + Elevation + Basin.Relief + Slope.30 + Basin.Slope + MCS + log(Forest.Area) + Annual.Precipitation, df)
pca
pca$x
log(df$Area)
pca$x$PC1
str(pca$x)
m = lm(log(df$Flow) ~ pca$x[,1:4])
summary(m)
m = lm(log(df$Flow) ~ pca$x[,1:5])
summary(m)
m = lm(log(df$Flow) ~ pca$x[,1:6])
summary(m)
m = lm(log(df$Flow) ~ pca$x[,1:7])
summary(m)
m = lm(log(df$Flow) ~ pca$x[,1:8])
summary(m)
m = lm(log(df$Flow) ~ pca$x[,1:3])
summary(m)
library(rstan)
# Bayesian linear regression
{
X = cbind(1, log(df$Area), log(df$Forest.Area), df$Annual.Precipitation)
y = df$Flow
stan.data = list(N = nrow(X), k = ncol(X),
X = X, y = y,
beta.prior.sd = rep(10, ncol(X)),
sigma.prior.scale = 10)
stan.fit = stan("linear.stan", data = stan.data,
chains = 1, warmup = burn.iter, iter = burn.iter + sample.iter)
}
burn.iter = 1000
sample.iter = 1000
X = cbind(1, log(df$Area), log(df$Forest.Area), df$Annual.Precipitation)
y = df$Flow
stan.data = list(N = nrow(X), k = ncol(X),
X = X, y = y,
beta_prior_sd = rep(10, ncol(X)),
sigma_prior_scale = 10)
stan.fit = stan("linear.stan", data = stan.data,
chains = 1, warmup = burn.iter, iter = burn.iter + sample.iter)
stan.extract = extract$stan.fit
stan.extract = extract(stan.fit)
names(stan.extract)
dim(stan.extract$beta)
apply(stan.extract$beta, 2, function(col) mean(col > 0))
apply(stan.extract$beta, 2, mean)
# Model based on plots
# Looks good overall; residuals are normal, etc.
m = lm(log(Flow) ~ log(Area) + log(Forest.Area) + Annual.Precipitation, df)
summary(m)
y = log(df$Flow)
stan.data = list(N = nrow(X), k = ncol(X),
X = X, y = y,
beta_prior_sd = rep(10, ncol(X)),
sigma_prior_scale = 10)
stan.fit = stan("linear.stan", data = stan.data,
chains = 1, warmup = burn.iter, iter = burn.iter + sample.iter)
stan.extract = extract(stan.fit)
apply(stan.extract$beta, 2, mean)
apply(stan.extract$beta, 2, function(col) mean(col > 0))
summary(m)
sample.iter = 10000
X = cbind(1, log(df$Area), log(df$Forest.Area), df$Annual.Precipitation)
y = log(df$Flow)
stan.data = list(N = nrow(X), k = ncol(X),
X = X, y = y,
beta_prior_sd = rep(10, ncol(X)),
sigma_prior_scale = 10)
stan.fit = stan("linear.stan", data = stan.data,
chains = 1, warmup = burn.iter, iter = burn.iter + sample.iter)
stan.fit = stan("linear.stan", data = stan.data,
chains = 1, warmup = burn.iter, iter = burn.iter + sample.iter)
stan.extract = extract(stan.fit)
traceplot(stan.fit)
stan.extract = extract(stan.fit)
# Pretty similar to classical regression results
apply(stan.extract$beta, 2, mean)
apply(stan.extract$beta, 2, function(col) mean(col > 0))
source('~/git/pan/Baba/analysis.R', echo=TRUE)
pca
prcomp(~ Area + Elevation, df)
eigen(df[,c("Area", "Elevation")])
m = df[,c("Area", "Elevation")]
eigen(m %*% t(m))
m = as.matrix(m)
eigen(m %*% t(m))
eigen(t(m) %*% m)
prcomp(~ Area + Elevation, df)
source('~/git/pan/Baba/analysis.R', echo=TRUE)
pca
summary(pca)
